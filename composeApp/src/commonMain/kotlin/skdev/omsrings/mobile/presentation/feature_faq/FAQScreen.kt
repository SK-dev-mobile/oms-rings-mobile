package skdev.omsrings.mobile.presentation.feature_faq

import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import org.jetbrains.compose.ui.tooling.preview.Preview
import skdev.omsrings.mobile.presentation.base.BaseScreen


object FAQScreen : BaseScreen("faq_screen") {
    @Composable
    override fun MainContent() {
        FAQScreenContent()
    }
}

@Composable
fun FAQScreenContent() {

    Scaffold(
        topBar = {
            FAQTopAppBar()
        }
    ) { innerPadding ->
        FAQList(
            faqItems = faqItemsData,
            modifier = Modifier.padding(innerPadding)
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun FAQTopAppBar() {
    TopAppBar(
        title = {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("FAQ: –ñ–ë–ò –ö–æ–ª—å—Ü–∞")
                Icon(
                    Icons.Filled.Menu,
                    contentDescription = "FAQ Help",
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(24.dp)
                )
            }
        },
        navigationIcon = {
            IconButton(onClick = { /* Implement back navigation if needed */ }) {
                Icon(Icons.Filled.ArrowBack, contentDescription = "Back")
            }
        }
    )
}

@Composable
private fun FAQList(
    faqItems: List<FAQItem>,
    modifier: Modifier = Modifier
) {
    LazyColumn(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        items(faqItems) { item ->
            ExpandableFAQCard(item)
            Spacer(modifier = Modifier.height(8.dp))
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun ExpandableFAQCard(faqItem: FAQItem) {
    var expanded by remember { mutableStateOf(true) }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .animateContentSize(
                animationSpec = spring(
                    dampingRatio = Spring.DampingRatioMediumBouncy,
                    stiffness = Spring.StiffnessLow
                )
            ),
        onClick = { expanded = !expanded }
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            FAQCardHeader(faqItem, expanded)
            if (expanded) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = faqItem.description,
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}

@Composable
private fun FAQCardHeader(faqItem: FAQItem, expanded: Boolean) {
    Row(verticalAlignment = Alignment.CenterVertically) {
        Text(
            text = faqItem.emoji,
            style = MaterialTheme.typography.headlineSmall
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(
            text = faqItem.title,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            color = faqItem.color
        )
        Spacer(modifier = Modifier.weight(1f))
        Icon(
            imageVector = if (expanded) Icons.Filled.List else Icons.Filled.MoreVert,
            contentDescription = if (expanded) "Collapse" else "Expand"
        )
    }
}

data class FAQItem(
    val emoji: String,
    val title: String,
    val description: String,
    val color: Color
)

private val faqItemsData = listOf(
    FAQItem(
        emoji = "üÜï",
        title = "–ù–û–í–´–ô –ó–ê–ö–ê–ó",
        description = "‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è\n‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
        color = Color(0xFF2196F3) // Blue
    ),
    FAQItem(
        emoji = "‚úÖ",
        title = "–í–´–ü–û–õ–ù–ï–ù–ù–´–ô –ó–ê–ö–ê–ó",
        description = "‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n‚Ä¢ –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
        color = Color(0xFF4CAF50) // Green
    ),
    FAQItem(
        emoji = "‚ùå",
        title = "–°–ü–ò–°–ê–ù–ù–´–ô –ó–ê–ö–ê–ó",
        description = "‚Ä¢ –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n‚Ä¢ –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è\n‚Ä¢ –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É \"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã\"\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
        color = Color(0xFFF44336) // Red
    ),
    FAQItem(
        emoji = "üìÖ",
        title = "–ü–ï–†–ï–ù–û–° –ù–ê –î–†–£–ì–£–Æ –î–ê–¢–£",
        description = "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ \"–ù–û–í–´–ô\" –∏ \"–í–´–ü–û–õ–ù–ï–ù–ù–´–ô\"\n‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å \"–°–ü–ò–°–ê–ù–ù–´–ô\"\n‚Ä¢ –í –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–º–µ—Ç–∫–∞ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞",
        color = Color(0xFF9C27B0) // Purple
    )
)

@Preview
@Composable
fun FAQScreenPreview() {
    FAQScreenContent()
}